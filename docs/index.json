[
  {
    "content": "Table of Contents IntroductionSAA C03 - Introduction\n",
    "description": " Everything related the AWS Solution Architect Associate SAA C03",
    "tags": null,
    "title": "Certification - SAA C03",
    "uri": "/aws/certification-saa_c03/"
  },
  {
    "content": "In this blogpost we are going to create a Virtual Private Cloud in Amazon Web Services that will host all the shared services generally deployed by an IT team. Since networking is fundamental to allow communication between servers and computers, every cloud service providers use a dedicated network construct. AWS and Google Cloud call it a VPC, while Azure for example calls it a VNET (virtual network).\nNetwork constructs are different between cloud providers. For example, a VPC is global in Google Cloud while it is a regional construct in AWS. This blogpost is not targeted to highlight the networking differences between AWS and GCP (more on that in a dedicated blogpost).\nAs AWS mentions, “A region is a physical location around the world where we cluster data centers. We call each group of logical data centers an Availability Zone. Each AWS Region consists of multiple, isolated, and physically separate AZs within a geographic area. Unlike other cloud providers, who often define a region as a single data center, the multiple AZ design of every AWS Region offers advantages for customers. Each AZ has independent power, cooling, and physical security and is connected via redundant, ultra-low-latency networks. AWS customers focused on high availability can design their applications to run in multiple AZs to achieve even greater fault-tolerance. AWS infrastructure Regions meet the highest levels of security, compliance, and data protection.\nWhat we are trying to achieve is the following:\nThat’s the diagram of a very general VPC that can created using the AWS Console. We will also cover how to create a VPC using several automation tools like the AWS CLI and Hashicorp Terraform and here is an example\nThe AWS console offers the choice to create juste a simple VPC without any other additionnal network construct or the entiore VPC with all the objects needed to allow communication between your entities (Route table, Security Group, NAT and Internet gateways). In our example we will be using the options that allows us to create all networking construct at once.\nCIDR:\nThis VPC has a CIDR or 10.0.10.0/24 and AWS will automatically create 2 publics subnets and 2 private subnets. These public and private subnets will be shared between the availability chosen during the creation process. No IPv6 is required for now.\nNumber of Availability zones: 2 is sufficient\nNumber of public and private subnets: 2 each (even though only 1 public is sufficient, our VPC might need additional private and public subnets later on.)\nNAT Gateway: None.\nThe following picture shows how to create your VPC:\nFor now we do not have to take care of any Elastic IP Address as we will ask AWS to assign a public IP to our controller when we deploy it.\nFinally the AWS Console will confirm that all the objects within the VPC have been created:\nThe next picture will demonstrate the automatically created subnets and route tables for the specifically mentionned availability zones.\nIf we have a look at the route tables associated with that VPC, we can see that each private subnet has its own routing table. The public subnets share the same public route table:\nWhen you dig into the “AWS-UE1-VPC-MGMT-rtb-public” routing table, we can see that it has two routes for now :\n10.0.10.0/24, that is local 0.0.0.0/0, the default route that points to an internet gateway. Now if we deploy an EC2 instance into any public subnet that belongs to the Region/AZ created previously, we should have connectivity to reach the internet. If we want to authorize inbound traffic to that EC2 instance, we need to allow that traffic using the stateful AWS Security Groups.\nOur VPC should be ready to host our Aviatrix Controller to start out multicloud journey.\nBonus If you want to verify using the CLI (some of us are still network engineers right ?) you can configure your computer following this doc.\n(I will reduce the amount of information in the outputs below to focus on what’s important. For example, this output should also list the default VPCs but I will not list it)\n$ aws ec2 describe-vpcs | jq { \"Vpcs\": [ { \"CidrBlock\": \"10.0.10.0/24\", \"DhcpOptionsId\": \"dopt-0a943645c8bc81085\", \"State\": \"available\", \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \"\", \"InstanceTenancy\": \"default\", \"CidrBlockAssociationSet\": [ { \"AssociationId\": \"vpc-cidr-assoc-04f586cab46d8b000\", \"CidrBlock\": \"10.0.10.0/24\", \"CidrBlockState\": { \"State\": \"associated\" } } ], \"IsDefault\": false, \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT\" } ] }, ] } We can also check for the subnets created.\n$ aws ec2 describe-subnets --filters \"Name=vpc-id,Values=vpc-08aee6f377637f9ae\" | jq { \"Subnets\": [ { \"AvailabilityZone\": \"us-east-1b\", \"AvailabilityZoneId\": \"use1-az1\", \"AvailableIpAddressCount\": 11, \"CidrBlock\": \"10.0.10.16/28\", \"DefaultForAz\": false, \"MapPublicIpOnLaunch\": false, \"MapCustomerOwnedIpOnLaunch\": false, \"State\": \"available\", \"SubnetId\": \"subnet-07c81d6d42836a8f9\", \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \", \"AssignIpv6AddressOnCreation\": false, \"Ipv6CidrBlockAssociationSet\": [], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -subnet-public2-us-east-1b\" } ], \"SubnetArn\": \"arn:aws:ec2:us-east-1: :subnet/subnet-07c81d6d42836a8f9\", \"EnableDns64\": false, \"Ipv6Native\": false, \"PrivateDnsNameOptionsOnLaunch\": { \"HostnameType\": \"ip-name\", \"EnableResourceNameDnsARecord\": false, \"EnableResourceNameDnsAAAARecord\": false } }, { \"AvailabilityZone\": \"us-east-1b\", \"AvailabilityZoneId\": \"use1-az1\", \"AvailableIpAddressCount\": 11, \"CidrBlock\": \"10.0.10.144/28\", \"DefaultForAz\": false, \"MapPublicIpOnLaunch\": false, \"MapCustomerOwnedIpOnLaunch\": false, \"State\": \"available\", \"SubnetId\": \"subnet-0f75d35ae1da469cc\", \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \", \"AssignIpv6AddressOnCreation\": false, \"Ipv6CidrBlockAssociationSet\": [], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -subnet-private2-us-east-1b\" } ], \"SubnetArn\": \"arn:aws:ec2:us-east-1: :subnet/subnet-0f75d35ae1da469cc\", \"EnableDns64\": false, \"Ipv6Native\": false, \"PrivateDnsNameOptionsOnLaunch\": { \"HostnameType\": \"ip-name\", \"EnableResourceNameDnsARecord\": false, \"EnableResourceNameDnsAAAARecord\": false } }, { \"AvailabilityZone\": \"us-east-1a\", \"AvailabilityZoneId\": \"use1-az6\", \"AvailableIpAddressCount\": 11, \"CidrBlock\": \"10.0.10.128/28\", \"DefaultForAz\": false, \"MapPublicIpOnLaunch\": false, \"MapCustomerOwnedIpOnLaunch\": false, \"State\": \"available\", \"SubnetId\": \"subnet-0c363777a7f301bc2\", \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \", \"AssignIpv6AddressOnCreation\": false, \"Ipv6CidrBlockAssociationSet\": [], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -subnet-private1-us-east-1a\" } ], \"SubnetArn\": \"arn:aws:ec2:us-east-1: :subnet/subnet-0c363777a7f301bc2\", \"EnableDns64\": false, \"Ipv6Native\": false, \"PrivateDnsNameOptionsOnLaunch\": { \"HostnameType\": \"ip-name\", \"EnableResourceNameDnsARecord\": false, \"EnableResourceNameDnsAAAARecord\": false } }, { \"AvailabilityZone\": \"us-east-1a\", \"AvailabilityZoneId\": \"use1-az6\", \"AvailableIpAddressCount\": 11, \"CidrBlock\": \"10.0.10.0/28\", \"DefaultForAz\": false, \"MapPublicIpOnLaunch\": false, \"MapCustomerOwnedIpOnLaunch\": false, \"State\": \"available\", \"SubnetId\": \"subnet-0f2351620e76a54d7\", \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \", \"AssignIpv6AddressOnCreation\": false, \"Ipv6CidrBlockAssociationSet\": [], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -subnet-public1-us-east-1a\" } ], \"SubnetArn\": \"arn:aws:ec2:us-east-1: :subnet/subnet-0f2351620e76a54d7\", \"EnableDns64\": false, \"Ipv6Native\": false, \"PrivateDnsNameOptionsOnLaunch\": { \"HostnameType\": \"ip-name\", \"EnableResourceNameDnsARecord\": false, \"EnableResourceNameDnsAAAARecord\": false } } ] } Then we can have a look at the route tables that are associated with the VPC created previously.\n$ aws ec2 describe-route-tables --filters \"Name=vpc-id,Values=vpc-08aee6f377637f9ae\" | jq { \"RouteTables\": [ { \"Associations\": [ { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-02429aa65c6ca4696\", \"RouteTableId\": \"rtb-04083da70542085d7\", \"SubnetId\": \"subnet-0f75d35ae1da469cc\", \"AssociationState\": { \"State\": \"associated\" } } ], \"PropagatingVgws\": [], \"RouteTableId\": \"rtb-04083da70542085d7\", \"Routes\": [ { \"DestinationCidrBlock\": \"10.0.10.0/24\", \"GatewayId\": \"local\", \"Origin\": \"CreateRouteTable\", \"State\": \"active\" }, { \"DestinationPrefixListId\": \"pl-63a5400a\", \"GatewayId\": \"vpce-07c5489eece54ac5c\", \"Origin\": \"CreateRoute\", \"State\": \"active\" } ], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -rtb-private2-us-east-1b\" } ], \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \" }, { \"Associations\": [ { \"Main\": true, \"RouteTableAssociationId\": \"rtbassoc-032f087a7405940dd\", \"RouteTableId\": \"rtb-050a2ad500f057f3b\", \"AssociationState\": { \"State\": \"associated\" } } ], \"PropagatingVgws\": [], \"RouteTableId\": \"rtb-050a2ad500f057f3b\", \"Routes\": [ { \"DestinationCidrBlock\": \"10.0.10.0/24\", \"GatewayId\": \"local\", \"Origin\": \"CreateRouteTable\", \"State\": \"active\" } ], \"Tags\": [], \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \" }, { \"Associations\": [ { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-049270142f38cc317\", \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"SubnetId\": \"subnet-07c81d6d42836a8f9\", \"AssociationState\": { \"State\": \"associated\" } }, { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-0f4a7bb9b742f8840\", \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"SubnetId\": \"subnet-0f2351620e76a54d7\", \"AssociationState\": { \"State\": \"associated\" } } ], \"PropagatingVgws\": [], \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"Routes\": [ { \"DestinationCidrBlock\": \"10.0.10.0/24\", \"GatewayId\": \"local\", \"Origin\": \"CreateRouteTable\", \"State\": \"active\" }, { \"DestinationCidrBlock\": \"0.0.0.0/0\", \"GatewayId\": \"igw-08cb7b3514b815ae0\", \"Origin\": \"CreateRoute\", \"State\": \"active\" } ], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -rtb-public\" } ], \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \" }, { \"Associations\": [ { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-0a9141e0861dbca9c\", \"RouteTableId\": \"rtb-0bbeb2d8088d29033\", \"SubnetId\": \"subnet-0c363777a7f301bc2\", \"AssociationState\": { \"State\": \"associated\" } } ], \"PropagatingVgws\": [], \"RouteTableId\": \"rtb-0bbeb2d8088d29033\", \"Routes\": [ { \"DestinationCidrBlock\": \"10.0.10.0/24\", \"GatewayId\": \"local\", \"Origin\": \"CreateRouteTable\", \"State\": \"active\" }, { \"DestinationPrefixListId\": \"pl-63a5400a\", \"GatewayId\": \"vpce-07c5489eece54ac5c\", \"Origin\": \"CreateRoute\", \"State\": \"active\" } ], \"Tags\": [dzoo { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -rtb-private1-us-east-1a\" } ], \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \" } ] } Finally, let’s dig deeper and have a look at the public routing tables entries and how it is associated.\nWe can see that this routing table is shared with 2 subnets: subnet-07c81d6d42836a8f9 and subnet-0f2351620e76a54d7 (both public subnets in the VPC on different AZ).\nThe routing table has the 2 entries mentionned above:\n10.0.10.0/24 for the local subnet 0.0.0.0/0 that points to the internet gateway (igw-08cb7b3514b815ae0) used by the public subnet in the VPC aws ec2 describe-route-tables --filters \"Name=tag:Name,Values=AWS-UE1-VPC-MGMT -rtb-public\" | jq { \"RouteTables\": [ { \"Associations\": [ { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-049270142f38cc317\", \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"SubnetId\": \"subnet-07c81d6d42836a8f9\", \"AssociationState\": { \"State\": \"associated\" } }, { \"Main\": false, \"RouteTableAssociationId\": \"rtbassoc-0f4a7bb9b742f8840\", \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"SubnetId\": \"subnet-0f2351620e76a54d7\", \"AssociationState\": { \"State\": \"associated\" } } ], \"PropagatingVgws\": [], \"RouteTableId\": \"rtb-0726a61879b6886c8\", \"Routes\": [ { \"DestinationCidrBlock\": \"10.0.10.0/24\", \"GatewayId\": \"local\", \"Origin\": \"CreateRouteTable\", \"State\": \"active\" }, { \"DestinationCidrBlock\": \"0.0.0.0/0\", \"GatewayId\": \"igw-08cb7b3514b815ae0\", \"Origin\": \"CreateRoute\", \"State\": \"active\" } ], \"Tags\": [ { \"Key\": \"Name\", \"Value\": \"AWS-UE1-VPC-MGMT -rtb-public\" } ], \"VpcId\": \"vpc-08aee6f377637f9ae\", \"OwnerId\": \" \" } ] } last edited: October 28th 2022\n",
    "description": "Walkthrough of a VPC creation in AWS",
    "tags": null,
    "title": "Create a VPC - Manual",
    "uri": "/aws/vpc/manual-vpc/"
  },
  {
    "content": "It looks like MacOS Ventura (13.2.1 in my case) uses OPenSSH_9.0p1 and LibreSSL 3.3.6. There are plenty of article here and there on the web but I wanted to do my version as well to document it.\n$ sw_vers ProductName:\tmacOS ProductVersion:\t13.2.1 BuildVersion:\t22D68 $ /usr/bin/ssh -V OpenSSH_9.0p1, LibreSSL 3.3.6 When you try to connect to a legacy Cisco IOS you might have some issues during the SSH key exchange.\n$ ssh nmichel@10.1.1.1 Unable to negotiate with 10.1.1.1 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1 The error message is pretty straightforward but you can have more details using the following command and debug\nnmichel@vPackets-Mac-Mini.local:/Users/nmichel/code/Blogs/vPackets-blog git:(main*) $ ssh -vvvv admin@10.1.1.1 OpenSSH_9.0p1, LibreSSL 3.3.6 debug1: Reading configuration data /Users/nmichel/.ssh/config debug3: kex names ok: [diffie-hellman-group1-sha1,] debug3: kex names ok: [diffie-hellman-group14-sha1] debug3: kex names ok: [diffie-hellman-group1-sha1] debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 21: include /etc/ssh/ssh_config.d/* matched no files debug1: /etc/ssh/ssh_config line 54: Applying options for * debug2: resolve_canonicalize: hostname 10.1.1.1 is address debug3: expanded UserKnownHostsFile '~/.ssh/known_hosts' -\u003e '/Users/nmichel/.ssh/known_hosts' debug3: expanded UserKnownHostsFile '~/.ssh/known_hosts2' -\u003e '/Users/nmichel/.ssh/known_hosts2' debug1: Authenticator provider $SSH_SK_PROVIDER did not resolve; disabling debug3: ssh_connect_direct: entering debug1: Connecting to 10.1.1.1 [10.1.1.1] port 22. debug3: set_sock_tos: set socket 3 IP_TOS 0x48 debug1: Connection established. debug1: identity file /Users/nmichel/.ssh/id_rsa type -1 debug1: identity file /Users/nmichel/.ssh/id_rsa-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_ecdsa type -1 debug1: identity file /Users/nmichel/.ssh/id_ecdsa-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_ecdsa_sk type -1 debug1: identity file /Users/nmichel/.ssh/id_ecdsa_sk-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_ed25519 type 3 debug1: identity file /Users/nmichel/.ssh/id_ed25519-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_ed25519_sk type -1 debug1: identity file /Users/nmichel/.ssh/id_ed25519_sk-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_xmss type -1 debug1: identity file /Users/nmichel/.ssh/id_xmss-cert type -1 debug1: identity file /Users/nmichel/.ssh/id_dsa type -1 debug1: identity file /Users/nmichel/.ssh/id_dsa-cert type -1 debug1: Local version string SSH-2.0-OpenSSH_9.0 debug1: Remote protocol version 1.99, remote software version Cisco-1.25 debug1: compat_banner: match: Cisco-1.25 pat Cisco-1.* compat 0x60000000 debug2: fd 3 setting O_NONBLOCK debug1: Authenticating to 10.1.1.1:22 as 'admin' debug3: record_hostkey: found key type RSA in file /Users/nmichel/.ssh/known_hosts:11 debug3: load_hostkeys_file: loaded 1 keys from 10.1.1.1 debug1: load_hostkeys: fopen /Users/nmichel/.ssh/known_hosts2: No such file or directory debug1: load_hostkeys: fopen /etc/ssh/ssh_known_hosts: No such file or directory debug1: load_hostkeys: fopen /etc/ssh/ssh_known_hosts2: No such file or directory debug3: order_hostkeyalgs: prefer hostkeyalgs: rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa debug3: send packet: type 20 debug1: SSH2_MSG_KEXINIT sent debug3: receive packet: type 20 debug1: SSH2_MSG_KEXINIT received debug2: local client KEXINIT proposal debug2: KEX algorithms: sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group1-sha1,ext-info-c debug2: host key algorithms: rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521 debug2: ciphers ctos: aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc debug2: ciphers stoc: aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: compression ctos: none,zlib@openssh.com,zlib debug2: compression stoc: none,zlib@openssh.com,zlib debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug2: peer server KEXINIT proposal debug2: KEX algorithms: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1 debug2: host key algorithms: ssh-rsa debug2: ciphers ctos: aes256-ctr debug2: ciphers stoc: aes256-ctr debug2: MACs ctos: hmac-sha2-512 debug2: MACs stoc: hmac-sha2-512 debug2: compression ctos: none debug2: compression stoc: none debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug1: kex: algorithm: (no match) Unable to negotiate with 10.1.1.1 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1 We can see that the Cisco Routers is offering\nKEX algorithms: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1 while our local machine offers\nKEX algorithms: sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group1-sha1,ext-info-c In this case, you might want to enable the ssh algorithms asked by the Cisco routers. (I haven’t checked what are the latest KexAlgorithm supported by the latest IOS…. Might be a good opportunity to update the router.)\nIt is initially possible to influence the algorith used by openssh using the command line\nssh -oKexAlgorithms=diffie-hellman-group14-sha1 admin@10.1.1.1 This method is not really scalable and doesn’t really work for me as I am using RoyalTSX to manage my SSH connections.\nSo I prefer to tackle the problem in a different way and OpenSSH offers a way to have a more granular configuration for your hosts, you can create an SSH config file for your OpenSSH client.\nYou can either create a global config using /etc/ssh/ssh_config or create a more user-centric configuration: ~/.ssh/config\nHere is a working configuration:\n# settings for all hosts HostkeyAlgorithms +ssh-rsa KexAlgorithms +diffie-hellman-group14-sha1, Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc # host specific settings Host c1111 HostName 10.1.1.1 KexAlgorithms +diffie-hellman-group14-sha1 user nmichel Host c3560 HostName 10.1.1.1 KexAlgorithms +diffie-hellman-group1-sha1 Now I can initiate an SSH connection towards my “legacy” devices…. Might be a good opportunity to update them :)\n",
    "description": "",
    "tags": null,
    "title": "SSH To Cisco devices",
    "uri": "/security/ssh/ssh-to-cisco-isr/"
  },
  {
    "content": "Amazon Web Services This section will contain all the content specifically created for the Amazon Web Service Cloud provider.\nNetworking will be the focus for this cloud service provider but other services will also be discussed in details.\nTable of Contents Certification - SAA C03 Everything related the AWS Solution Architect Associate SAA C03\nIntroductionSAA C03 - Introduction\nNetworking Everything related to the network contruscts in AWS\nCreate a VPC - ManualWalkthrough of a VPC creation in AWS\nCreate a VPC - TerraformAutomate your VPC deployment with Infrastructure as code !\n",
    "description": "",
    "tags": null,
    "title": " ",
    "uri": "/aws/"
  },
  {
    "content": "Table of Contents Create a VPC - ManualWalkthrough of a VPC creation in AWS\nCreate a VPC - TerraformAutomate your VPC deployment with Infrastructure as code !\n",
    "description": " Everything related to the network contruscts in AWS",
    "tags": null,
    "title": "Networking",
    "uri": "/aws/vpc/"
  },
  {
    "content": "Amazon Web Services This section will contain all the security related content.\nTable of Contents SSHTable of Contents SSH To Cisco devicesIt looks like MacOS Ventura (13.2.1 in my case) uses OPenSSH_9.0p1 and LibreSSL 3.3.6. There are plenty of article here and there on the web but I wanted to do my version as well to document it. $ sw_vers ProductName:\tmacOS ProductVersion:\t13.2.1 BuildVersion:\t22D68 $ /usr/bin/ssh -V OpenSSH_9.0p1, LibreSSL 3.3.6 When you try to connect to a legacy Cisco IOS you might have some issues during the SSH key exchange.\nSSH To Cisco devicesIt looks like MacOS Ventura (13.2.1 in my case) uses OPenSSH_9.0p1 and LibreSSL 3.3.6. There are plenty of article here and there on the web but I wanted to do my version as well to document it. $ sw_vers ProductName:\tmacOS ProductVersion:\t13.2.1 BuildVersion:\t22D68 $ /usr/bin/ssh -V OpenSSH_9.0p1, LibreSSL 3.3.6 When you try to connect to a legacy Cisco IOS you might have some issues during the SSH key exchange.\n",
    "description": "",
    "tags": null,
    "title": " ",
    "uri": "/security/"
  },
  {
    "content": "Table of Contents SSH To Cisco devicesIt looks like MacOS Ventura (13.2.1 in my case) uses OPenSSH_9.0p1 and LibreSSL 3.3.6. There are plenty of article here and there on the web but I wanted to do my version as well to document it. $ sw_vers ProductName:\tmacOS ProductVersion:\t13.2.1 BuildVersion:\t22D68 $ /usr/bin/ssh -V OpenSSH_9.0p1, LibreSSL 3.3.6 When you try to connect to a legacy Cisco IOS you might have some issues during the SSH key exchange.\n",
    "description": "",
    "tags": null,
    "title": "SSH",
    "uri": "/security/ssh/"
  },
  {
    "content": "In a previous blogpost we managed to manually create a simple VPC that could host several services or traditionnal EC2 instances. This process was quite simple using the AWS console as it would deploy all the network construct within a VPC (Subnets, Route Tables, Internet Gateways etc…)\nI have been deploying network infrastructure (NSX, Cumulus, Cisco …) for the past few years using Infrastructure as Code and naturally I will show you how to deploy networking cloud constructs related to AWS (not only !) using Terraform.\nFirst, Terraform will need a way to authenticate with AWS (covered in this documentation, this AWS documentation is also very valuable).\nThere are plenty of examples on the Internet for this but the official terraform aws module is quite complete, it points to a GitHub repo that is very well presented and easy to follow.\nMy code for this particular deployment is very simple:\nprovider \"aws\" { shared_config_files = [\"/Users/nmichel/.aws/config\"] shared_credentials_files = [\"/Users/nmichel/.aws/credentials\"] #profile = \"default\" region = \"us-east-1\" } locals { name = \"AWS-UE1-VPC-MGMT\" region = \"us-east-1\" tags = { Owner = \"Nicolas MICHEL\" Environment = \"IT Services\" #Name = \"AWS-UE1-VPC-MGMT\" } } module \"vpc\" { source = \"terraform-aws-modules/vpc/aws\" version = \"3.14.2\" name = \"AWS-UE1-VPC-MGMT\" cidr = \"10.0.10.0/24\" azs = [\"${local.region}a\", \"${local.region}b\"] private_subnets = [\"10.0.10.96/28\", \"10.0.10.112/28\"] public_subnets = [\"10.0.10.0/28\", \"10.0.10.16/28\"] enable_nat_gateway = false enable_vpn_gateway = false manage_default_route_table = true default_route_table_tags = { Name = \"${local.name}-default\" } tags = local.tags } resource \"aws_security_group\" \"allow_ssh\" { name = \"SG-vPackets-MGMT\" description = \"Allow SSH/HTTPS inbound traffic\" vpc_id = module.vpc.vpc_id #vpc_id = aws_vpc.main.id ingress { description = \"SSH from VPC\" from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [\"YOUR_IP\"] #ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block] } ingress { description = \"TLS from VPC\" from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [\"YOUR_IP\"] #ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [\"0.0.0.0/0\"] ipv6_cidr_blocks = [\"::/0\"] } tags = { Name = \"SG-vPackets-MGMT\" } } Same as previously it will create a simple VPC in 10 seconds and will allow me to install all my EC2 instances workloads. The only difference here is that I have included a Security Group that will allow inbound SSH and TLS traffic into EC2 instances linked with that Security Group. (please include your IP in the security group).\n$ terraform plan Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # module.vpc.aws_default_route_table.default[0] will be created + resource \"aws_default_route_table\" \"default\" { + arn = (known after apply) + default_route_table_id = (known after apply) + id = (known after apply) + owner_id = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-default\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-default\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) + timeouts { + create = \"5m\" + update = \"5m\" } } # module.vpc.aws_internet_gateway.this[0] will be created + resource \"aws_internet_gateway\" \"this\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route.public_internet_gateway[0] will be created + resource \"aws_route\" \"public_internet_gateway\" { + destination_cidr_block = \"0.0.0.0/0\" + gateway_id = (known after apply) + id = (known after apply) + instance_id = (known after apply) + instance_owner_id = (known after apply) + network_interface_id = (known after apply) + origin = (known after apply) + route_table_id = (known after apply) + state = (known after apply) + timeouts { + create = \"5m\" } } # module.vpc.aws_route_table.private[0] will be created + resource \"aws_route_table\" \"private\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table.private[1] will be created + resource \"aws_route_table\" \"private\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table.public[0] will be created + resource \"aws_route_table\" \"public\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table_association.private[0] will be created + resource \"aws_route_table_association\" \"private\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.private[1] will be created + resource \"aws_route_table_association\" \"private\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.public[0] will be created + resource \"aws_route_table_association\" \"public\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.public[1] will be created + resource \"aws_route_table_association\" \"public\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_subnet.private[0] will be created + resource \"aws_subnet\" \"private\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.96/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = false + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.private[1] will be created + resource \"aws_subnet\" \"private\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.112/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = false + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.public[0] will be created + resource \"aws_subnet\" \"public\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.0/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = true + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.public[1] will be created + resource \"aws_subnet\" \"public\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.16/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = true + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_vpc.this[0] will be created + resource \"aws_vpc\" \"this\" { + arn = (known after apply) + assign_generated_ipv6_cidr_block = false + cidr_block = \"10.0.10.0/24\" + default_network_acl_id = (known after apply) + default_route_table_id = (known after apply) + default_security_group_id = (known after apply) + dhcp_options_id = (known after apply) + enable_classiclink = (known after apply) + enable_classiclink_dns_support = (known after apply) + enable_dns_hostnames = false + enable_dns_support = true + id = (known after apply) + instance_tenancy = \"default\" + ipv6_association_id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_network_border_group = (known after apply) + main_route_table_id = (known after apply) + owner_id = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } } Plan: 15 to add, 0 to change, 0 to destroy. ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run \"terraform apply\" now. Once you are ready to commit your configuration:\n$ terraform apply --auto-approve Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # module.vpc.aws_default_route_table.default[0] will be created + resource \"aws_default_route_table\" \"default\" { + arn = (known after apply) + default_route_table_id = (known after apply) + id = (known after apply) + owner_id = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-default\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-default\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) + timeouts { + create = \"5m\" + update = \"5m\" } } # module.vpc.aws_internet_gateway.this[0] will be created + resource \"aws_internet_gateway\" \"this\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route.public_internet_gateway[0] will be created + resource \"aws_route\" \"public_internet_gateway\" { + destination_cidr_block = \"0.0.0.0/0\" + gateway_id = (known after apply) + id = (known after apply) + instance_id = (known after apply) + instance_owner_id = (known after apply) + network_interface_id = (known after apply) + origin = (known after apply) + route_table_id = (known after apply) + state = (known after apply) + timeouts { + create = \"5m\" } } # module.vpc.aws_route_table.private[0] will be created + resource \"aws_route_table\" \"private\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table.private[1] will be created + resource \"aws_route_table\" \"private\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table.public[0] will be created + resource \"aws_route_table\" \"public\" { + arn = (known after apply) + id = (known after apply) + owner_id = (known after apply) + propagating_vgws = (known after apply) + route = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_route_table_association.private[0] will be created + resource \"aws_route_table_association\" \"private\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.private[1] will be created + resource \"aws_route_table_association\" \"private\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.public[0] will be created + resource \"aws_route_table_association\" \"public\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_route_table_association.public[1] will be created + resource \"aws_route_table_association\" \"public\" { + id = (known after apply) + route_table_id = (known after apply) + subnet_id = (known after apply) } # module.vpc.aws_subnet.private[0] will be created + resource \"aws_subnet\" \"private\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.96/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = false + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.private[1] will be created + resource \"aws_subnet\" \"private\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.112/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = false + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-private-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.public[0] will be created + resource \"aws_subnet\" \"public\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1a\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.0/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = true + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1a\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_subnet.public[1] will be created + resource \"aws_subnet\" \"public\" { + arn = (known after apply) + assign_ipv6_address_on_creation = false + availability_zone = \"us-east-1b\" + availability_zone_id = (known after apply) + cidr_block = \"10.0.10.16/28\" + enable_dns64 = false + enable_resource_name_dns_a_record_on_launch = false + enable_resource_name_dns_aaaa_record_on_launch = false + id = (known after apply) + ipv6_cidr_block_association_id = (known after apply) + ipv6_native = false + map_public_ip_on_launch = true + owner_id = (known after apply) + private_dns_hostname_type_on_launch = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT-public-us-east-1b\" + \"Owner\" = \"Nicolas MICHEL\" } + vpc_id = (known after apply) } # module.vpc.aws_vpc.this[0] will be created + resource \"aws_vpc\" \"this\" { + arn = (known after apply) + assign_generated_ipv6_cidr_block = false + cidr_block = \"10.0.10.0/24\" + default_network_acl_id = (known after apply) + default_route_table_id = (known after apply) + default_security_group_id = (known after apply) + dhcp_options_id = (known after apply) + enable_classiclink = (known after apply) + enable_classiclink_dns_support = (known after apply) + enable_dns_hostnames = false + enable_dns_support = true + id = (known after apply) + instance_tenancy = \"default\" + ipv6_association_id = (known after apply) + ipv6_cidr_block = (known after apply) + ipv6_cidr_block_network_border_group = (known after apply) + main_route_table_id = (known after apply) + owner_id = (known after apply) + tags = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } + tags_all = { + \"Environment\" = \"IT Services\" + \"Name\" = \"AWS-UE1-VPC-MGMT\" + \"Owner\" = \"Nicolas MICHEL\" } } Plan: 15 to add, 0 to change, 0 to destroy. module.vpc.aws_vpc.this[0]: Creating... module.vpc.aws_vpc.this[0]: Creation complete after 2s [id=vpc-0d69b9d9d035a3211] module.vpc.aws_internet_gateway.this[0]: Creating... module.vpc.aws_route_table.private[1]: Creating... module.vpc.aws_default_route_table.default[0]: Creating... module.vpc.aws_subnet.private[0]: Creating... module.vpc.aws_subnet.private[1]: Creating... module.vpc.aws_route_table.private[0]: Creating... module.vpc.aws_subnet.public[1]: Creating... module.vpc.aws_subnet.public[0]: Creating... module.vpc.aws_route_table.public[0]: Creating... module.vpc.aws_default_route_table.default[0]: Creation complete after 0s [id=rtb-013e6bb525838db79] module.vpc.aws_internet_gateway.this[0]: Creation complete after 1s [id=igw-0b0e542cb990236bb] module.vpc.aws_route_table.private[1]: Creation complete after 1s [id=rtb-04bbfcd5698ba09b1] module.vpc.aws_subnet.private[1]: Creation complete after 1s [id=subnet-045c21dd73cb6b884] module.vpc.aws_route_table.public[0]: Creation complete after 1s [id=rtb-0ea1ec6dfcda17cfb] module.vpc.aws_route.public_internet_gateway[0]: Creating... module.vpc.aws_route_table.private[0]: Creation complete after 1s [id=rtb-0621af979022ced9e] module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-0ea8623065f7d1ad8] module.vpc.aws_route_table_association.private[1]: Creating... module.vpc.aws_route_table_association.private[0]: Creating... module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 0s [id=r-rtb-0ea1ec6dfcda17cfb1080289494] module.vpc.aws_route_table_association.private[1]: Creation complete after 0s [id=rtbassoc-0004ba062692cf374] module.vpc.aws_route_table_association.private[0]: Creation complete after 0s [id=rtbassoc-000104d5c187f0447] module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed] module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed] module.vpc.aws_subnet.public[0]: Creation complete after 11s [id=subnet-091fc97a306565841] module.vpc.aws_subnet.public[1]: Creation complete after 11s [id=subnet-028328f18f4e7abca] module.vpc.aws_route_table_association.public[0]: Creating... module.vpc.aws_route_table_association.public[1]: Creating... module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-070ed95b691a0a6dc] module.vpc.aws_route_table_association.public[1]: Creation complete after 1s [id=rtbassoc-026c58be638f03aaa] Apply complete! Resources: 15 added, 0 changed, 0 destroyed. And voila ! The last lines in the outputs are the most important and will show you the networks constructs created !\n",
    "description": "Automate your VPC deployment with Infrastructure as code !",
    "tags": null,
    "title": "Create a VPC - Terraform",
    "uri": "/aws/vpc/automation-vpc/"
  },
  {
    "content": "This blogpost will link all the resources that I am using to pass this certification:\nBlueprint AWS SAA C03 Blueprint. Whitepapers and documentation AWS - Well Architected Framework. AWS - Service Overview. Training and Resources (order or priority) Adrian Cantrill - AWS SAA C03 Training. Andrew Brown - AWS Cloud Project Bootcamp. A Cloud Guru - AWS SAA C03 Training. Projects and Code AWS - BGP Infrastructure and 3 tier app - TBD. ",
    "description": "SAA C03 - Introduction",
    "tags": null,
    "title": "Introduction",
    "uri": "/aws/certification-saa_c03/introduction/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
